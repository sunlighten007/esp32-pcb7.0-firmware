# 1 "C:\\Users\\91904\\AppData\\Local\\Temp\\tmpahu83m35"
#include <Arduino.h>
# 1 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
 #include <DS18B20.h>
DS18B20 ds(14);
#include "Arduino.h"
 #include "esp_ota_ops.h"
#include <HTTPClient.h>
#include <ArduinoOTA.h>
#include <Preferences.h>
 #include <iostream>

 #include <SoftwareSerial.h>
#include "BluetoothSerial.h"
BluetoothSerial ESP_BT;

SoftwareSerial BTserial(2, 3);



#include <WiFi.h>


#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h>


#include <ArduinoUniqueID.h>


#include <SPIFFS.h>

#include <ArduinoJson.h>
#include <SD.h>
#include <SPI.h>

bool UPDATE_OTA=false;
bool UPDATE_OTA_OVER_BLE=false;

#define DATA_COMMAND 0X40
#define DISP_COMMAND 0x80
#define ADDR_COMMAND 0XC0

void init_TM1638(void);
void Write_DATA(unsigned char add, unsigned char DATA);
unsigned char Read_key(void);




boolean print = false;



int time_count_temp = 5;


boolean PROCESS_COMMAND_FLAG = false;


const String FIRMWARE_VERSION = "v0.0.5";


const String HARDWARE_VERSION = "v1.0.0";

void pro_funtion(void);

void pro_time(void);
void pro_display(void);
void pro_pwm(void);

void sauna_temperature(void);
byte nibble(char c);
void hexCharacterStringToBytes(byte *byteArray, const char *hexString);
void Write_COM(unsigned char cmd);
void generate_serial_id();
void reInitializeArray(byte *array);
void connect_to_wifi(String _ssid, String _wifi_password);
String getHeaderValue(String header, String headerName);
void saveWifiDetailsLocally(String ssid, String wifi_password);
void ota_over_web();
void fn(int t, int t2);
void BLE_Services();
void wifiSetupOnStart();
void setup();
void updateWifiStatus();
void bluetooth_data();
int getFirmwareSize(byte buffer[]);
void progress(int t, int t2);
void turnOnLight(boolean isLight);
void TM1638_Write(unsigned char DATA);
unsigned char TM1638_Read(void);
void Write_allLED(unsigned char LED_flag);
void saveStatusOfBridgeCommand();
void saveStatusOfBridgeCommandForApp();
void process_command(byte command_heater_acp[], int i);
void setup_FileSystem();
void saveWifiDetailInFileSystem(String w_name,String w_password);
void writeData_File(String data_jsonFormat);
String updateFileData(String key,String value);
#line 74 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
byte nibble(char c)
{
  if (c >= '0' && c <= '9')
    return c - '0';

  if (c >= 'a' && c <= 'f')
    return c - 'a' + 10;

  if (c >= 'A' && c <= 'F')
    return c - 'A' + 10;

  return 0;
}


class WifiDetail;


WifiDetail* readData_File();
String appendWifiDetail(String,String);


class WifiDetail{
   public:
  String w_Name;
  String w_Password;
    WifiDetail() {}
    WifiDetail(String w_NameT,String w_PasswordT){
      w_Name=w_NameT;
      w_Password=w_PasswordT;
   }

 void setWifiDetail(String name,String password){
      w_Name=name;
      w_Password=password;
  }

};







void hexCharacterStringToBytes(byte *byteArray, const char *hexString)
{
  bool oddLength = strlen(hexString) & 1;

  byte currentByte = 0;
  byte byteIndex = 0;

  for (byte charIndex = 0; charIndex < strlen(hexString); charIndex++)
  {
    bool oddCharIndex = charIndex & 1;

    if (oddLength)
    {



      if (oddCharIndex)
      {

        currentByte = nibble(hexString[charIndex]) << 4;
      }
      else
      {

        currentByte |= nibble(hexString[charIndex]);
        byteArray[byteIndex++] = currentByte;
        currentByte = 0;
      }
    }
    else
    {


      if (!oddCharIndex)
      {

        currentByte = nibble(hexString[charIndex]) << 4;
      }
      else
      {

        currentByte |= nibble(hexString[charIndex]);
        byteArray[byteIndex++] = currentByte;
        currentByte = 0;
      }
    }
  }
}



int DIO = 21;
int CLK = 22;
int STB = 19;


int RELAY1_LED = 25;
int RELAY2_LED = 26;
int RELAY1_OUT = 33;
int RELAY2_OUT = 16;

int LED_1 = 13;
int LED_2 = 02;

int RELAY2_BLUE = 04;
int RELAY2_GREEN = 23;
int RELAY2_N = 0;



int IN_LED = 17;
int OUT_LED = 32;

int temp_c_led = 18;
int temp_f_led = 05;

int appointment_led = 27;

int POWER_FLAG;
int POWER_FLAG_BACK;

int TURN_ON_FLAG;

int GRADE_UP;
int GRADE_DOWN;
int TIME_COUNT;

int GRADE_MAX = 0;

int TEMP_INC_FLAG;
int TEMP_DEC_FLAG;
int POWER_FLAG2;
int IN_LED_FLAG;
int OUT_LED_FLAG = 0;
int TIME_INC_FLAG;
int TIME_DEC_FLAG;

int POWER_FLAG_on_time = 5;
int POWER_FLAG_off_time = 0;


int TIME_ALL_FLAG = 0;
int TEMP_ALL_FLAG = 0;
int TIME_ALL_FLAG_BACK = 0;
int TEMP_ALL_FLAG_BACK = 0;
int TEMP_FC_FLAG = 1;



int TEMP_INC_FLAG_BACK;
int TEMP_DEC_FLAG_BACK;
int POWER_FLAG2_BACK;
int IN_LED_FLAG_BACK;
int TIME_INC_FLAG_BACK;
int TIME_DEC_FLAG_BACK;

int TIME_100ms;
int TIME_1000ms;
int TIME_INC_SWTICH_LONG;
int TIME_DEC_SWTICH_LONG;

int TIME_LONG;

int RELAY1_flag;
int RELAY2_flag;

int RELAY1_flag_back = 0;

int LED_1_FLAG = 0;
int LED_2_FLAG = 0;


byte set_temp = 75;
byte set_f_temp = 170;
unsigned int settemp_display_time = 0;
unsigned int TEMP_INC_SWTICH_LONG = 0;
unsigned int TEMP_DEC_SWTICH_LONG = 0;

unsigned char read_c0 = 0;
unsigned char read_c1 = 0;
unsigned char read_c2 = 0;
unsigned char read_c3 = 0;


float float_currenttemp = 0;
unsigned int single_currenttemp = 0;
unsigned int all_currenttemp = 0;

int sample_tem_n = 0;
byte actual_temperature = 0;

byte actual_f_temperature = 0;

unsigned int sample_n = 0;


#define appointment_com 4136


unsigned int appointment_h_time = 24;
unsigned long int appointment_10ms_time = appointment_com;

unsigned int appointment_flag = 0;

unsigned int on_4h_key_time = 0;
unsigned int on_4h_h_time = 4;
unsigned long int on_4h_10ms_time = appointment_com;

int TIME_WORK_FLAG = 0;

unsigned int on_just_flag = 0;


unsigned char tab[] = {
    0x3F,
    0x06,
    0x5B,
    0x4F,
    0x66,
    0x6D,
    0x7D,
    0x07,
    0x7F,
    0x6F,
    0x77,
    0x7C,
    0x39,
    0x5E,
    0x79,
    0x71
};
unsigned char num[8];
static unsigned char c[4];


int UPDATE_NOT_INITIALIZE = 0;
int UPDATE_FOUND = 1;
int UPDATE_IN_PROCESS = 2;
int UPDATE_SUCCESSFULLY_DONE = 3;
int UPDATE_FAILED = 4;
int FIRMWARE_UPDATE_STATUS = UPDATE_NOT_INITIALIZE;



void pro_uart(void);
unsigned int from_acp_heater_n = 0;
unsigned int from_acp_heater = 0;
byte command_heater_acp[13] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

byte command_tx_acp[13] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};


byte stateOfBridge[14] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

byte command_sw = 0;

byte temp_cmd_sw = command_sw;

byte command_time_60 = 0;
byte command_time_4h = 0;
byte command_time_fc = 0;

byte command_temp_en = 0;
byte command_temp_set = 0;

byte command_time_reservation = 0;

static unsigned char nnn = 0;
unsigned int tx_time = 0;


String FILE_NAME_json="/config.json";

char CONFIG_JSON_DEFAULT_DATA[]="{\"wifiDetail\":[],\"wifi_mac\":\"1351824120\",\"bt_mac\":\"Bt_f212\",\"cpu_id\":\"Cpu_id_f212\"}";




void Write_COM(unsigned char cmd)
{
  digitalWrite(STB, LOW);
  TM1638_Write(cmd);
  digitalWrite(STB, HIGH);
}

String device_id = "";

void generate_serial_id()
{
  for (size_t i = 0; i < UniqueIDsize; i++)
  {
    if (UniqueID[i] < 0x10)
      device_id = device_id + 0;

    device_id = device_id + String(UniqueID[i], HEX);

    if (i != UniqueIDsize - 1)
    {
      device_id = device_id;
    }
  }
  device_id.toUpperCase();
}

#define WIFI_SERVICE_UUID "0c40e5e8-5fed-4747-9fb0-877e78e78947"
#define WIFI_SSID_CHARACTERISTIC_UUID "13e0021f-c715-4abf-9422-96d62b05c87e"
#define WIFI_PASS_CHARACTERISTIC_UUID "13e0021f-c715-4abf-9422-96d62b05c87f"
#define WIFI_STATUS_CHARACTERISTIC_UUID "13e0021f-c715-4abf-9422-96d62b05c87a"
#define DEVICE_INFORMATION_SERVICE_UUID "0000180a-0000-1000-8000-00805f9b34fb"
#define SERIAL_NUMBER_STRING_CHARACTERISTIC_UUID "00002a25-0000-1000-8000-00805f9b34fb"
#define FIRMWARE_REVISION_STRING_CHARACTERISTIC_UUID "00002a26-0000-1000-8000-00805f9b34fb"
#define HARDWARE_REVISION_STRING_CHARACTERISTIC_UUID "00002a27-0000-1000-8000-00805f9b34fb"
#define FIRMWARE_UPDATE_UUID "c4b90540-5751-11ec-bf63-0242ac130002"
#define FIRWARE_UPDATE_SERVICE_UUID "e72b6488-5751-11ec-bf63-0242ac130002"
#define FIRMWARE_STATUS_SERVICE_UUID "90b2fd16-5803-11ec-bf63-0242ac130002"
#define FIRMWARE_STATUS_CHARACTERISTIC_UUID "bc27ca6c-5803-11ec-bf63-0242ac130002"
#define EXTERNAL_LIGHT_CHARACTERISTIC_UUID "50fda9c4-5bea-11ec-bf63-0242ac130002"
#define EXTERNAL_LIGHT_SERVICE_UUID "87d80d68-5bea-11ec-bf63-0242ac130002"
#define FIRMWARE_UPDATE_OVER_WIFI_UUID "dc75ba3d-7f0d-403e-8c7d-a83ea2501ebc"
#define FIRMWARE_UPDATE_OVER_WIFI_Characteristic "c87dc73e-1333-428f-94b2-1bbd9ea0ceb9"

Preferences preferences;
# 419 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
#define ENVIRONMENTAL_SENSING_SERVICE_UUID "0000181a-0000-1000-8000-00805f9b34fb"
#define TEMPERATURE_CHARACTERISTIC_UUID "00002a6e-0000-1000-8000-00805f9b34fb"

BLEService *environmentService;
BLECharacteristic *temperatureCharacteristic;
BLECharacteristic *pWIFI_STATUS_Characteristic;

String wifi_ssid = "";
String wifi_pass = "";
int wifi_status = 0;

#define FULL_PACKET 512
 esp_ota_handle_t otaHandler = 0;
bool updateFlag = false;
bool readyFlag = false;
int bytesReceived = 0;
int timesWritten = 0;

std::string getHex(byte byteData)
{

  std::string d = "0123456789ABCDEF";

  int num = 43421;
  std::string res;
  res = (char)byteData;
# 457 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
  return res;
}


std::string getByteArrayToHexString(byte byteArrayToConvert[])
{

  std::string hexVal = "";
  for (int i = 0; i < 14; i++)
  {



    hexVal = hexVal + getHex(byteArrayToConvert[i]);
  }

  return hexVal;
}


void reInitializeArray(byte *array)
{
  int lenOfArray = sizeof(array) / sizeof(array);

  for (int i = 0; i < lenOfArray; i++)
  {
    array[i] = 0;
  }
}

void connect_to_wifi(String _ssid, String _wifi_password)
{

  Serial.println("Attempting wifi connection");
  wifi_status = 0;
  if (WiFi.status() == WL_CONNECTED)
  {
    Serial.println("Wifi was already connected. Disconnecting...");
    WiFi.disconnect();
    delay(2000);
    Serial.println("Wifi disconnected");
  }
  WiFi.mode(WIFI_STA);
  WiFi.begin(_ssid.c_str(), _wifi_password.c_str());
  delay(3000);
  Serial.println(WiFi.status());
  if (WiFi.waitForConnectResult() != WL_CONNECTED)
  {
    Serial.println((String) "Unable to connect to " + _ssid + " with pass " + _wifi_password + " , maybe because of incorrect credentials.");

  }
  else
  {
    saveWifiDetailsLocally(_ssid, _wifi_password);
    Serial.println((String) "Connected to Wifi at ssid:  " + _ssid);
    wifi_status = 1;

  }

  Serial.println("Setting wifi status on BLE");
}



long contentLength = 0;
bool isValidContentType = false;



String url_host = String("http://bridge.otauserver.sunlightsaunas.com:2300/signature_bridge/update?current_version=" + FIRMWARE_VERSION + "&uuid=" + device_id + "&country=US&language=en");
int port = 2300;
String bin = "/update.bin";


String getHeaderValue(String header, String headerName)
{
  return header.substring(strlen(headerName.c_str()));
}
void saveWifiDetailsLocally(String ssid, String wifi_password)
{

  preferences.putString("wi_ssid", ssid);
  preferences.putString("wi_pass", wifi_password);
  Serial.println("Wifi Details saved locally");

}
# 551 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
void ota_over_web()
{
  UPDATE_OTA=false;

  Serial.println(String("Firmware update URL: ") + url_host);

  FIRMWARE_UPDATE_STATUS = UPDATE_IN_PROCESS;

  HTTPClient http;
  http.begin(url_host);

  int httpCode = http.GET();
  if (httpCode != HTTP_CODE_OK)
  {

    Serial.println(String("response code: " + String(httpCode)));
    FIRMWARE_UPDATE_STATUS = UPDATE_FAILED;
    return;
  }
  int contentLength = http.getSize();
  if (contentLength <= 0)
  {
    FIRMWARE_UPDATE_STATUS = UPDATE_FAILED;
    Serial.println("Content-Length not defined");
    return;
  }

  bool canBegin = Update.begin(contentLength);
  if (!canBegin)
  {
    FIRMWARE_UPDATE_STATUS = UPDATE_FAILED;
    Serial.println("Not enough space to begin OTA");
    return;
  }

   FIRMWARE_UPDATE_STATUS = UPDATE_FOUND;

   Client &wifi_client = http.getStream();

  Serial.print("----22---update.begin()----------- COntent len->  ");
  Serial.print(contentLength);
   Update.onProgress(fn);
    Serial.println("onPress added now writing");
  int written = Update.writeStream(wifi_client);

   Serial.print("------11---update.begin()-----------");


  if (written != contentLength)
  {
    Serial.println(String("OTA written ") + written + " / " + contentLength + " bytes");
    return;
  }

  if (!Update.end())
  {
    Serial.println("Error #" + String(Update.getError()));
    FIRMWARE_UPDATE_STATUS = UPDATE_FAILED;
    return;
  }

  if (!Update.isFinished())
  {
    Serial.println("Update failed.");
    FIRMWARE_UPDATE_STATUS = UPDATE_FAILED;
    return;
  }

  FIRMWARE_UPDATE_STATUS = UPDATE_SUCCESSFULLY_DONE;
  Serial.println("Update successfully completed. Rebooting.");
  ESP.restart();
}

void fn(int t, int t2){

  Serial.print(t);
  Serial.print(t2);
  Serial.println("");
}
class WIFI_SSID_Callbacks : public BLECharacteristicCallbacks
{
  void onWrite(BLECharacteristic *pCharacteristic)
  {
    std::string rxValue = pCharacteristic->getValue();

    if (rxValue.length() > 0)
    {
      wifi_ssid = rxValue.c_str();
      Serial.println(wifi_ssid);
    }
  }
};
class WIFI_PASS_Callbacks : public BLECharacteristicCallbacks
{
  void onWrite(BLECharacteristic *pCharacteristic)
  {
    std::string rxValue = pCharacteristic->getValue();

    if (rxValue.length() > 0)
    {
      wifi_pass = rxValue.c_str();
      connect_to_wifi(wifi_ssid, wifi_pass);


      Serial.println(wifi_pass);
    }
  }
};
class WIFI_STATUS_Callbacks : public BLECharacteristicCallbacks
{

  void onRead(BLECharacteristic *pCharacteristic)
  {

    if (WiFi.status() == WL_CONNECTED)
    {
      wifi_status = 1;
    }
    else
    {
      wifi_status = 0;
    }
    command_tx_acp[13]=wifi_status;

    std::string s1 = getByteArrayToHexString(command_tx_acp);



    pWIFI_STATUS_Characteristic->setValue(s1);
  }
};

class UPDATE_FIRMWARE_CALLBACK : public BLECharacteristicCallbacks
{
  void onWrite(BLECharacteristic *pCharacteristic)
  {
    std::   string rxValue = pCharacteristic->getValue();
    Serial.println(rxValue.c_str());
    Serial.print("----------------------update the firmaware--------------");
    if (rxValue.length() > 0)
    {

       UPDATE_OTA=true;
      Serial.println("update write");
      Serial.print(FIRMWARE_VERSION);

    }
  }
};

class EXTERNAL_LIGHT_CALLBACK : public BLECharacteristicCallbacks
{
  void onWrite(BLECharacteristic *pCharacteristic)
  {
    Serial.println("into external light");
    std::string rxValue = pCharacteristic->getValue();

    if (rxValue.length() > 0)
    {


      byte byteArray[13];
      hexCharacterStringToBytes(byteArray, rxValue.c_str());
      Serial.println(rxValue.c_str());


      int totalOfCommand_heaters_acp = 0;
      for (int i = 0; i < 13; i++)
      {
        command_heater_acp[i] = byteArray[i];
        totalOfCommand_heaters_acp += command_heater_acp[i];
        Serial.println(command_heater_acp[i]);

      }
      if (totalOfCommand_heaters_acp == 349)
      {
        command_heater_acp[12] = 349;
      }
      else
      {
        command_heater_acp[12] = totalOfCommand_heaters_acp;
      }

      Serial.println("commandHeater[9]");
      Serial.println(command_heater_acp[9]);
      Serial.println("TOTAL");
      Serial.println(command_heater_acp[12]);
      Serial.println("totalCommand");
      Serial.println(totalOfCommand_heaters_acp);
# 750 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
      time_count_temp = 50;
    }
  }
};

std::string rxData;
void write_ota(uint8_t *data,int bufferLength);
class OTA_OVER_BLE_CALLBACK : public BLECharacteristicCallbacks{
 void onWrite(BLECharacteristic *pCharacteristic)
  {
    Serial.print("--------------------------write method of onWrite is called------------------");

   rxData = pCharacteristic->getValue();
    uint8_t data[10];
   write_ota(data,2);
  UPDATE_OTA_OVER_BLE=true;


   return;
# 804 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
  };

};

void write_ota(uint8_t *data,int bufferLength){


  UPDATE_OTA_OVER_BLE=false;
   if (!updateFlag)
    {
      Serial.println("BeginOTA");
      esp_ota_begin(esp_ota_get_next_update_partition(NULL), OTA_SIZE_UNKNOWN, &otaHandler);

      Serial.print("esp_ota_begin()");
      updateFlag = true;
    }
# 832 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
      if (bufferLength > 0)
      {

       esp_err_t res= esp_ota_write(otaHandler,data,bufferLength);
       String temp=esp_err_to_name(res);
       Serial.print("-------response-----");
       Serial.println(temp);

        if (bufferLength<10)
        {
          esp_ota_end(otaHandler);
          Serial.println("EndOTA");
          if (ESP_OK == esp_ota_set_boot_partition(esp_ota_get_next_update_partition(NULL)))
          {
            delay(2000);
            esp_restart();
          }
          else
          {
            Serial.println("Upload Error");
          }
        }
      }
}
void BLE_Services()
{

  Serial.println("Starting BLE Services!");


  BLEDevice::init("SunlightenSauna-Signature");
  BLEServer *pServer = BLEDevice::createServer();
  BLEService *pWIFI_Service = pServer->createService(WIFI_SERVICE_UUID);
  BLECharacteristic *pWIFI_SSID_Characteristic = pWIFI_Service->createCharacteristic(
      WIFI_SSID_CHARACTERISTIC_UUID,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_WRITE |
          BLECharacteristic::PROPERTY_NOTIFY |
          BLECharacteristic::PROPERTY_INDICATE |
          BLECharacteristic::PROPERTY_BROADCAST);
  pWIFI_SSID_Characteristic->setValue(wifi_ssid.c_str());
  pWIFI_SSID_Characteristic->addDescriptor(new BLE2902());
  pWIFI_SSID_Characteristic->setCallbacks(new WIFI_SSID_Callbacks());

  BLECharacteristic *pWIFI_PASS_Characteristic = pWIFI_Service->createCharacteristic(
      WIFI_PASS_CHARACTERISTIC_UUID,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_WRITE |
          BLECharacteristic::PROPERTY_NOTIFY |
          BLECharacteristic::PROPERTY_INDICATE |
          BLECharacteristic::PROPERTY_BROADCAST);
  pWIFI_PASS_Characteristic->setValue(wifi_pass.c_str());
  pWIFI_PASS_Characteristic->addDescriptor(new BLE2902());
  pWIFI_PASS_Characteristic->setCallbacks(new WIFI_PASS_Callbacks());
# 894 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
 BLEService *pFirmware_Update_Over_WIFI = pServer->createService(FIRMWARE_UPDATE_OVER_WIFI_UUID);
 BLECharacteristic *pFIRMWARE_UPDATE_OVER_WIFI_Characteristic = pFirmware_Update_Over_WIFI->createCharacteristic(
      FIRMWARE_UPDATE_OVER_WIFI_Characteristic,
       BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_WRITE |
          BLECharacteristic::PROPERTY_NOTIFY |
          BLECharacteristic::PROPERTY_INDICATE |
          BLECharacteristic::PROPERTY_BROADCAST);

 pFIRMWARE_UPDATE_OVER_WIFI_Characteristic->addDescriptor(new BLE2902());

  pFIRMWARE_UPDATE_OVER_WIFI_Characteristic->setCallbacks(new UPDATE_FIRMWARE_CALLBACK());
    pFirmware_Update_Over_WIFI->start();
# 917 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
  pWIFI_STATUS_Characteristic = pWIFI_Service->createCharacteristic(
      WIFI_STATUS_CHARACTERISTIC_UUID,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_WRITE |
          BLECharacteristic::PROPERTY_NOTIFY |
          BLECharacteristic::PROPERTY_INDICATE |
          BLECharacteristic::PROPERTY_BROADCAST);
  pWIFI_STATUS_Characteristic->addDescriptor(new BLE2902());
  pWIFI_STATUS_Characteristic->setCallbacks(new WIFI_STATUS_Callbacks());
  pWIFI_Service->start();
# 943 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
  BLEService *pfirmwareStatusService = pServer->createService(FIRMWARE_STATUS_SERVICE_UUID);
  BLECharacteristic *pFIRMWARE_STATUS_Characteristic = pfirmwareStatusService->createCharacteristic(
      FIRMWARE_STATUS_CHARACTERISTIC_UUID,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_NOTIFY |
          BLECharacteristic::PROPERTY_INDICATE |
          BLECharacteristic::PROPERTY_BROADCAST);
  pFIRMWARE_STATUS_Characteristic->setValue(String(FIRMWARE_VERSION).c_str());
  pFIRMWARE_STATUS_Characteristic->addDescriptor(new BLE2902());
  pfirmwareStatusService->start();




  BLEService *pexternalLight = pServer->createService(EXTERNAL_LIGHT_SERVICE_UUID);
  BLECharacteristic *pexternal_Light_Characteristic = pexternalLight->createCharacteristic(
      EXTERNAL_LIGHT_CHARACTERISTIC_UUID,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_WRITE |
          BLECharacteristic::PROPERTY_NOTIFY);
  pexternal_Light_Characteristic->addDescriptor(new BLE2902());
  pexternal_Light_Characteristic->setCallbacks(new EXTERNAL_LIGHT_CALLBACK());
  pexternalLight->start();
# 980 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
  BLEService *deviceIdService = pServer->createService(DEVICE_INFORMATION_SERVICE_UUID);
  deviceIdService->start();
  BLECharacteristic *deviceIdSerialNumberCharacteristic = deviceIdService->createCharacteristic(
      SERIAL_NUMBER_STRING_CHARACTERISTIC_UUID,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_NOTIFY);
  deviceIdSerialNumberCharacteristic->setValue(device_id.c_str());


  BLECharacteristic *firmwareRevisionCharacteristic = deviceIdService->createCharacteristic(
      FIRMWARE_REVISION_STRING_CHARACTERISTIC_UUID,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_NOTIFY);
  firmwareRevisionCharacteristic->setValue(String(FIRMWARE_VERSION).c_str());

  BLECharacteristic *hardwareRevisionCharacteristic = deviceIdService->createCharacteristic(
      HARDWARE_REVISION_STRING_CHARACTERISTIC_UUID,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_NOTIFY);
  hardwareRevisionCharacteristic->setValue(String(HARDWARE_VERSION).c_str());
  deviceIdService->start();

  environmentService = pServer->createService(ENVIRONMENTAL_SENSING_SERVICE_UUID);
  temperatureCharacteristic = environmentService->createCharacteristic(
      TEMPERATURE_CHARACTERISTIC_UUID,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_NOTIFY |
          BLECharacteristic::PROPERTY_BROADCAST);
  environmentService->start();






  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(WIFI_SERVICE_UUID);
  pAdvertising->addServiceUUID(DEVICE_INFORMATION_SERVICE_UUID);
  pAdvertising->addServiceUUID(ENVIRONMENTAL_SENSING_SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x06);
  pAdvertising->setMinPreferred(0x12);



  BLEDevice::startAdvertising();

}
# 1078 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
void wifiSetupOnStart()
{
  Serial.println("Trying to setup wifi with savedwifi details");
  String DEFAULT_WIFI_CREDS = "---";

  String wifi_ssid = preferences.getString("wi_ssid", DEFAULT_WIFI_CREDS);
  String wifi_password = preferences.getString("wi_pass", DEFAULT_WIFI_CREDS);
  Serial.println("ssid retreived from storage->" + wifi_ssid);
  Serial.println("password retreived from storage->" + wifi_password);
  if (wifi_ssid == DEFAULT_WIFI_CREDS && wifi_password == DEFAULT_WIFI_CREDS)
  {
    Serial.println("Unable to finid saved wifi details.");
    Serial.println("Please setup wifi connection.");
  }
  else
  {
    Serial.println("attempting to connect wifi using ssid->" + wifi_ssid);
    Serial.println("attempting to connect wifi using password->" + wifi_password);
    connect_to_wifi(wifi_ssid, wifi_password);
    delay(1000);
  }
}
int connection_code = 0;
 File file;

void setup()
{
  generate_serial_id();
  unsigned char i;

  pinMode(STB, OUTPUT);
  pinMode(CLK, OUTPUT);
  pinMode(DIO, OUTPUT);

  pinMode(RELAY1_LED, OUTPUT);
  pinMode(RELAY2_LED, OUTPUT);
  pinMode(RELAY1_OUT, OUTPUT);
  pinMode(RELAY2_OUT, OUTPUT);
  pinMode(IN_LED, OUTPUT);
  pinMode(OUT_LED, OUTPUT);

  pinMode(RELAY2_BLUE, OUTPUT);
  pinMode(RELAY2_GREEN, OUTPUT);

  pinMode(temp_c_led, OUTPUT);
  pinMode(temp_f_led, OUTPUT);

  pinMode(LED_1, OUTPUT);
  pinMode(LED_2, OUTPUT);

  pinMode(appointment_led, OUTPUT);







  digitalWrite(RELAY1_LED, HIGH);
  digitalWrite(RELAY2_LED, HIGH);

  digitalWrite(RELAY2_BLUE, HIGH);
  digitalWrite(RELAY2_GREEN, HIGH);

  digitalWrite(IN_LED, LOW);
  digitalWrite(OUT_LED, LOW);

  digitalWrite(temp_c_led, HIGH);
  digitalWrite(temp_f_led, HIGH);
  digitalWrite(appointment_led, HIGH);

  digitalWrite(RELAY1_OUT, LOW);
  digitalWrite(RELAY2_OUT, LOW);
# 1164 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
  Write_COM(0x80);

  POWER_FLAG = 0;
  POWER_FLAG_BACK = 0;
  TURN_ON_FLAG = 0;

  TEMP_INC_FLAG = 0;
  TEMP_DEC_FLAG = 0;
  POWER_FLAG2 = 0;
  IN_LED_FLAG = 0;
  TIME_INC_FLAG = 0;
  TIME_DEC_FLAG = 0;

  TEMP_INC_FLAG_BACK = 0;
  TEMP_DEC_FLAG_BACK = 0;
  POWER_FLAG2_BACK = 0;
  IN_LED_FLAG_BACK = 0;
  TIME_INC_FLAG_BACK = 0;
  TIME_DEC_FLAG_BACK = 0;

  TIME_100ms = 0;
  TIME_1000ms = 0;

  TIME_INC_SWTICH_LONG = 0;
  TIME_DEC_SWTICH_LONG = 0;

  TIME_LONG = 0;

  Serial.begin(115200);

  Serial.println("Device ID: " + device_id);

  preferences.begin("prefs", false);

  Serial.print("---------Firmware Version----------- ");
  Serial.print(FIRMWARE_VERSION);
  Serial.println();
# 1210 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
 wifiSetupOnStart();



  BLE_Services();

 Serial.println("-----------New changes-------------");
    disableCore0WDT();

     ESP_BT.begin("S_Bluetooth");



   Serial.println("--------Bluetooth Device is Ready to Pair-------");
   String f_name="/main";
# 1243 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
}

void updateWifiStatus()
{

  if (WiFi.status() == WL_CONNECTED)
  {
    wifi_status = 1;
  }
  else
  {
    wifi_status = 0;
  }
  pWIFI_STATUS_Characteristic->setValue(wifi_status);
}
 uint8_t msg[500];
 bool updatingFirmware_Bluetooth=false;
 void loop()
 {
# 1272 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
    bluetooth_data();

if(updatingFirmware_Bluetooth)return;



   pro_funtion();

  delay(10);

  pro_time();
  pro_display();
  pro_pwm();
  updateWifiStatus();
  sauna_temperature();
  pro_uart();




  if (LED_1_FLAG == 0)
    LED_1_FLAG = 1;
  else
    LED_1_FLAG = 0;

  if (LED_2_FLAG == 0)
    LED_2_FLAG = 1;
  else
    LED_2_FLAG = 0;

  if (LED_1_FLAG == 0)
    digitalWrite(LED_1, HIGH);
  else
    digitalWrite(LED_1, LOW);

  if (LED_2_FLAG == 0)
    digitalWrite(LED_2, HIGH);
  else
    digitalWrite(LED_2, LOW);

  temperatureCharacteristic->setValue(String(actual_temperature).c_str());


   if(UPDATE_OTA){
     ota_over_web();
   }
    if(UPDATE_OTA_OVER_BLE){
      UPDATE_OTA_OVER_BLE=false;
      uint8_t data[12];






    }
 }


long int count=0;
bool fileOpened=false;
int written=0;
int updateStarted=0;
char testSend[]={'O','K',';'};
uint8_t buffer2[]={'O','K',';'};
 int writtenCount=0;
int pos=0;
int size;
void bluetooth_data(){


   if(ESP_BT.available()){

   updatingFirmware_Bluetooth=true;

    Serial.print("Data available()");
   uint8_t buffer[5000];
   int bufferSize=5000;
   byte byte=ESP_BT.readBytes(buffer,bufferSize);


     if(updateStarted==0){
        size=getFirmwareSize(buffer);
        Serial.print("---size--");
        Serial.println(size);
       bool canBegin = Update.begin(size);
       Serial.print("canBegine");

       Serial.print(canBegin);

    if(!canBegin)
  {
    FIRMWARE_UPDATE_STATUS = UPDATE_FAILED;
    Serial.println("Not enough space to begin OTA");
    return;
  }

      updateStarted=1;
      int sentData=ESP_BT.write(buffer2,3);
      Serial.print("sent data");

     return;

  }

      int byteRemaining= size-written;
          Serial.print("byteRemaining ");
          Serial.println(byteRemaining);


        if(byteRemaining<bufferSize){
        Serial.print("writing last segment");
        Serial.print(byteRemaining);
        int t=Update.write(buffer,byteRemaining);
        written+=t;
         writtenCount=writtenCount+byteRemaining;
      }else{

         int t1=Update.write(buffer,bufferSize);
            written+=t1;
            Serial.print("---written in else---");
             Serial.print(written);
             writtenCount=writtenCount+bufferSize;
       }

      if(Update.isFinished()){
        Serial.print(" Finnished");
       }

    if(byteRemaining<bufferSize){

        if(Update.isFinished()){
          Serial.println("--------Updation Fineshed sucessfully............");
          Serial.println(written);
         int res= Update.end();
         Serial.print("Updated.end Response");
         Serial.print(res);
          ESP.restart();
        }

        return;
      }

              int sentData=ESP_BT.write(buffer2,3);




}

}


int getFirmwareSize(byte buffer[]){
 int sizeOfByte=0;
        unsigned char bytes[10];
        for(int i=0;i<10;i++){
          if(buffer[i]!=47 && buffer[i]!=165){
            bytes[i]=buffer[i];
            sizeOfByte++;
          }
          if(buffer[i]==47)break;
        }
         char chars[sizeOfByte + 1];
         memcpy(chars, bytes, sizeOfByte);
         chars[sizeOfByte] = '\0';
         String s(chars);
       int size= s.toInt();

 return size;
}

void progress(int t, int t2){
  Serial.print("----onProgram---");
 Serial.print(t);
  Serial.print(t2);
  Serial.println("");

}


void turnOnLight(boolean isLight)
{

  if (isLight)
  {
    digitalWrite(OUT_LED, HIGH);

    Serial.print("print is true");
  }
  else
  {

    digitalWrite(OUT_LED, LOW);
    Serial.print("print is false ");
  }
}

void sauna_temperature(void)
{
  unsigned int i;
  unsigned int i_z;

  sample_n++;
  if (sample_n > 25)
  {
    sample_n = 0;

    ds.setResolution(9);
    float_currenttemp = ds.getTempC() + 6;
    single_currenttemp = (unsigned int)float_currenttemp;
    all_currenttemp = all_currenttemp + single_currenttemp;

    sample_tem_n++;

    if (sample_tem_n > 3)
    {
      sample_tem_n = 0;

      all_currenttemp = all_currenttemp / 4;
      actual_temperature = (byte)all_currenttemp;
      all_currenttemp = 0;
    }







    if (TEMP_FC_FLAG == 0)
    {
      i = actual_temperature / 10 * 0x10 + actual_temperature % 10;

      GRADE_MAX = 0;
    }
    else
    {
      actual_f_temperature = actual_temperature * 1.8 + 32;
      if (actual_f_temperature > 166)
        actual_f_temperature = 170;

      if (actual_f_temperature < 100)
      {
        GRADE_MAX = 0;
        i = actual_f_temperature / 10 * 0x10 + actual_f_temperature % 10;
      }
      else
      {
        GRADE_MAX = 1;
        i_z = actual_f_temperature - 100;
        i = i_z / 10 * 0x10 + i_z % 10;
      }
    }
    GRADE_DOWN = i & 0x0f;
    GRADE_UP = (i >> 4) & 0x0f;
  }
}

void TM1638_Write(unsigned char DATA)
{
  unsigned char i;
  pinMode(DIO, OUTPUT_OPEN_DRAIN);
  for (i = 0; i < 8; i++)
  {
    digitalWrite(CLK, LOW);
    if (DATA & 0X01)
      digitalWrite(DIO, HIGH);
    else
      digitalWrite(DIO, LOW);
    DATA >>= 1;
    digitalWrite(CLK, HIGH);
  }
}
unsigned char TM1638_Read(void)
{
  unsigned char i;
  unsigned char temp = 0;

  pinMode(DIO, INPUT);
  for (i = 0; i < 8; i++)
  {
    temp >>= 1;
    digitalWrite(CLK, LOW);

    if (digitalRead(DIO) == HIGH)
      temp |= 0x80;
    digitalWrite(CLK, HIGH);
  }
  return temp;
}






unsigned char Read_key(void)
{

  unsigned char i, key_value = 0;

  unsigned char mmm = 0;
  digitalWrite(STB, LOW);
  TM1638_Write(0x42);
  for (i = 0; i < 4; i++)
  {
    c[i] = TM1638_Read();
  }






  digitalWrite(STB, HIGH);
# 1601 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
  read_c0 = c[0];
  read_c1 = c[1];
  read_c2 = c[2];
  read_c3 = c[3];





  delayMicroseconds(1);


  nnn = c[2];
  nnn = nnn & 0x10;

  if ((nnn == 16) || (command_sw & 0x04))
  {

    TIME_INC_FLAG = 1;

  }
  else
  {

    TIME_INC_FLAG = 0;
  }

  nnn = c[0];
  nnn = nnn & 0x04;
  if ((nnn == 4) || (command_sw & 0x08))
    TIME_DEC_FLAG = 1;
  else
    TIME_DEC_FLAG = 0;

  nnn = c[3];
  nnn = nnn & 0x10;
  if ((nnn == 16) || (command_sw & 0x01))
  {

    POWER_FLAG = 1;
  }
  else
  {

    POWER_FLAG = 0;
  }

  nnn = c[3];
  nnn = nnn & 0x01;
  if (nnn == 1)
    POWER_FLAG_off_time = 2;
  else
    POWER_FLAG_on_time = 5;

  if ((POWER_FLAG_on_time == 0) || (command_sw & 0x02))
    POWER_FLAG2 = 1;
  if ((POWER_FLAG_off_time == 0) && ((command_sw & 0x02) == 0))
    POWER_FLAG2 = 0;

  nnn = c[2];
  nnn = nnn & 0x01;
  if ((nnn == 1) || (command_sw & 0x10))
    TEMP_INC_FLAG = 1;
  else
    TEMP_INC_FLAG = 0;

  nnn = c[0];
  nnn = nnn & 0x20;
  if ((nnn == 32) || (command_sw & 0x20))
    TEMP_DEC_FLAG = 1;
  else
    TEMP_DEC_FLAG = 0;

  nnn = c[1];
  nnn = nnn & 0x10;
  if ((nnn == 16) || (command_sw & 0x40))
  {
    IN_LED_FLAG = 1;
  }
  else
    IN_LED_FLAG = 0;

  nnn = c[1];
  nnn = nnn & 0x01;



  if ((nnn == 1) || (command_sw & 0x80))
  {

    OUT_LED_FLAG = 1;
  }
  else
  {

    OUT_LED_FLAG = 0;
  }

  nnn = read_c0;
  nnn = nnn & 0x04;

  mmm = read_c2;
  mmm = mmm & 0x10;
  if (((nnn == 4) && (mmm == 16)) || ((command_sw & 0x04) && (command_sw & 0x08)))
    TIME_ALL_FLAG = 1;
  else
    TIME_ALL_FLAG = 0;

  nnn = read_c0;
  nnn = nnn & 0x20;
  mmm = read_c2;
  mmm = mmm & 0x01e;
  if (((nnn == 32) && (mmm == 1)) || ((command_sw & 0x10) && (command_sw & 0x20)))
    TEMP_ALL_FLAG = 1;
  else
    TEMP_ALL_FLAG = 0;



  command_sw = 0;

  return i;
}
void Write_DATA(unsigned char add, unsigned char DATA)
{
  Write_COM(0x44);
  digitalWrite(STB, LOW);
  TM1638_Write(0xc0 | add);
  TM1638_Write(DATA);
  digitalWrite(STB, HIGH);
}
void Write_allLED(unsigned char LED_flag)
{
  unsigned char i;
  for (i = 0; i < 8; i++)
  {
    if (LED_flag == 0)
    {
      Write_DATA(2 * 0 + 1, 1);
    }
    else
    {
      if (LED_flag & (1 << i))
        Write_DATA(2 * i + 1, 1);
      else
        Write_DATA(2 * i + 1, 0);
    }
  }
}


void init_TM1638(void)
{
  unsigned char i;
  Write_COM(0x8b);
  Write_COM(0x40);
  digitalWrite(STB, LOW);
  TM1638_Write(0xc0);
  for (i = 0; i < 16; i++)
    TM1638_Write(0x00);
  digitalWrite(STB, HIGH);
}


void pro_funtion(void)
{
  unsigned char switch_flag;

  switch_flag = Read_key();
# 1780 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
  if (appointment_flag == 0)
  {

    if ((POWER_FLAG_BACK == 1) && (POWER_FLAG == 0))
    {
      if (on_just_flag == 1)
      {
        on_just_flag = 0;
      }
      else
      {
        if (TURN_ON_FLAG == 0)
        {
          TURN_ON_FLAG = 1;
          init_TM1638();



          GRADE_UP = 0;
          GRADE_DOWN = 0;
          GRADE_MAX = 0;

          TIME_COUNT = 60;

          TIME_1000ms = 0;

          Write_DATA(0 << 1, tab[0]);
          Write_DATA(1 << 1, tab[0]);


          Write_DATA(3 << 1, tab[0]);

          Write_DATA(4 << 1, tab[0]);

          RELAY1_flag = 1;
          RELAY2_flag = 1;

          on_4h_h_time = 4;
          on_4h_10ms_time = appointment_com;


        }
        else
        {
          TURN_ON_FLAG = 0;

          Write_DATA(0 << 1, 0);
          Write_DATA(1 << 1, 0);

          Write_DATA(2 << 1, 0);
          Write_DATA(3 << 1, 0);

          Write_DATA(4 << 1, 0);

          RELAY1_flag = 0;
          RELAY2_flag = 0;

          digitalWrite(temp_c_led, HIGH);
          digitalWrite(temp_f_led, HIGH);
        }
      }
    }
  }
# 1853 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
  if (command_time_60 > 0)
  {

    command_time_60 = (command_time_60 & 0x7f);

    if ((command_time_60 < 61) && (command_time_60 > 0))
    {
      if (TIME_WORK_FLAG == 0)
      {
        TIME_COUNT = command_time_60;
        TIME_1000ms = 0;
      }
    }
  }


  if (command_time_4h & 0x80)
  {
    command_time_4h = (command_time_4h & 0x7f);

    if ((command_time_4h < 5) && (command_time_4h > 0))
    {
      if (TIME_WORK_FLAG == 1)
      {
        on_4h_h_time = command_time_4h;
        on_4h_10ms_time = appointment_com;
      }
    }
  }

  if (command_time_reservation & 0x80)
  {
    command_time_reservation = (command_time_reservation & 0x7f);

    if ((command_time_reservation < 37) && (command_time_reservation > 0))
    {
      if (appointment_flag == 1)
      {
        appointment_h_time = command_time_reservation;
        appointment_10ms_time = appointment_com;
      }
    }
  }

  if (command_time_fc & 0x80)
  {
    command_time_fc = (command_time_fc & 0x7f);
    if (command_time_fc == 0)
      TEMP_FC_FLAG = 0;
    if (command_time_fc == 1)
      TEMP_FC_FLAG = 1;
  }

  if (command_temp_en == 1)
  {
    command_temp_en = 0;
    if (TEMP_FC_FLAG == 1)
    {
      if ((command_temp_set < 171) && (command_temp_set > 99))
      {
        set_f_temp = command_temp_set;
        settemp_display_time = 300;
      }
    }

    if (TEMP_FC_FLAG == 0)
    {
      if ((command_temp_set < 76) && (command_temp_set > 39))
      {
        set_temp = command_temp_set;
        settemp_display_time = 300;
      }
    }
  }


  if (TURN_ON_FLAG == 1)
  {

    if ((POWER_FLAG2_BACK == 0) && (POWER_FLAG2 == 1))
    {
      if (RELAY2_flag == 0)
        RELAY2_flag = 1;
      else
        RELAY2_flag = 0;
    }
# 1947 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
    if ((TIME_INC_FLAG_BACK == 0) && (TIME_INC_FLAG == 1))
    {
      if (TIME_WORK_FLAG == 0)
      {
        if (TIME_COUNT < 60 && command_time_60 == 0)
        {

          TIME_COUNT++;
          TIME_1000ms = 0;
        }
      }
      else
      {
        if (on_4h_h_time < 4)
        {
          on_4h_h_time++;
          on_4h_10ms_time = appointment_com;
        }
      }
    }

    if ((TIME_DEC_FLAG_BACK == 0) && (TIME_DEC_FLAG == 1))
    {
      if (TIME_WORK_FLAG == 0)
      {
        if (TIME_COUNT > 1)
        {
          TIME_COUNT--;
          TIME_1000ms = 0;
        }
      }
      else
      {
        if (on_4h_h_time > 1)
        {
          on_4h_h_time--;
          on_4h_10ms_time = appointment_com;
        }
      }
    }

    if ((TEMP_INC_FLAG_BACK == 0) && (TEMP_INC_FLAG == 1))
    {
      if (TEMP_FC_FLAG == 0)
      {
        if (set_temp < 75)
        {
          set_temp++;
        }
      }
      else
      {
        if (set_f_temp < 170)
        {
          set_f_temp++;
        }
      }

      settemp_display_time = 300;
    }

    if ((TEMP_DEC_FLAG_BACK == 0) && (TEMP_DEC_FLAG == 1))
    {
      if (TEMP_FC_FLAG == 0)
      {
        if (set_temp > 40)
        {
          set_temp--;
        }
      }
      else
      {
        if (set_f_temp > 100)
        {
          set_f_temp--;
        }
      }
      settemp_display_time = 300;
    }

    if ((TEMP_ALL_FLAG_BACK == 0) && (TEMP_ALL_FLAG == 1))
    {
      if (TEMP_FC_FLAG == 0)
      {
        TEMP_FC_FLAG = 1;
        set_f_temp = set_temp * 1.8 + 32;
        actual_f_temperature = actual_temperature * 1.8 + 32;

        if (set_f_temp > 166)
          set_f_temp = 170;

        if (set_f_temp < 100)
          set_f_temp = 100;
      }
      else
      {
        TEMP_FC_FLAG = 0;

        set_temp = (set_f_temp - 32) / 1.8;
        actual_temperature = (actual_f_temperature - 32) / 1.8;

        if (set_temp > 74)
          set_temp = 75;

        if (set_temp < 40)
          set_temp = 40;
      }
    }
  }
  else
  {
    if (appointment_flag == 1)
    {
      if ((TIME_INC_FLAG_BACK == 0) && (TIME_INC_FLAG == 1))
      {
        if (appointment_h_time < 36)
        {
          appointment_h_time++;
          appointment_10ms_time = appointment_com;
        }
      }

      if ((TIME_DEC_FLAG_BACK == 0) && (TIME_DEC_FLAG == 1))
      {
        if (appointment_h_time > 1)
        {
          appointment_h_time--;
          appointment_10ms_time = appointment_com;
        }
      }
    }

    if ((TIME_ALL_FLAG_BACK == 0) && (TIME_ALL_FLAG == 1))
    {
      if (appointment_flag == 0)
      {
        appointment_flag = 1;
        init_TM1638();
      }
      else
        appointment_flag = 0;
    }
  }

  if ((appointment_flag == 0) && (TURN_ON_FLAG == 0))
  {
    if ((POWER_FLAG_BACK == 0) && (POWER_FLAG == 1))
    {
      on_4h_key_time = 582;
    }

    if (on_4h_key_time == 1)
    {
      on_4h_key_time = 0;

      on_just_flag = 1;

      if (TIME_WORK_FLAG == 0)
      {
        TIME_WORK_FLAG = 1;
        on_4h_10ms_time = appointment_com;
        on_4h_h_time = 4;
      }
      else
        TIME_WORK_FLAG = 0;

      TURN_ON_FLAG = 1;
      init_TM1638();



      GRADE_UP = 0;
      GRADE_DOWN = 0;
      GRADE_MAX = 0;

      TIME_COUNT = 60;

      TIME_1000ms = 0;

      Write_DATA(0 << 1, tab[0]);
      Write_DATA(1 << 1, tab[0]);


      Write_DATA(3 << 1, tab[0]);

      Write_DATA(4 << 1, tab[0]);

      RELAY1_flag = 1;
      RELAY2_flag = 1;
    }
  }
  else
  {
    on_4h_key_time = 0;
  }

  if (POWER_FLAG == 0)
  {
    on_4h_key_time = 0;
  }
# 2164 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
  POWER_FLAG_BACK = POWER_FLAG;

  TEMP_INC_FLAG_BACK = TEMP_INC_FLAG;
  TEMP_DEC_FLAG_BACK = TEMP_DEC_FLAG;

  IN_LED_FLAG_BACK = IN_LED_FLAG;

  TIME_INC_FLAG_BACK = TIME_INC_FLAG;
  TIME_DEC_FLAG_BACK = TIME_DEC_FLAG;

  TIME_ALL_FLAG_BACK = TIME_ALL_FLAG;
  TEMP_ALL_FLAG_BACK = TEMP_ALL_FLAG;
}

void pro_time(void)
{

  if (POWER_FLAG_on_time > 0)
    POWER_FLAG_on_time--;
  if (POWER_FLAG_off_time > 0)
    POWER_FLAG_off_time--;


  if (appointment_flag == 1)
  {
    if (appointment_10ms_time > 0)
      appointment_10ms_time--;
    else
    {
      appointment_10ms_time = appointment_com;
      if (appointment_h_time > 0)
        appointment_h_time--;
      if (appointment_h_time == 0)
      {
        appointment_flag = 0;

        TURN_ON_FLAG = 1;
        init_TM1638();



        GRADE_UP = 0;
        GRADE_DOWN = 0;
        GRADE_MAX = 0;

        TIME_COUNT = 60;

        TIME_1000ms = 0;

        Write_DATA(0 << 1, tab[0]);
        Write_DATA(1 << 1, tab[0]);


        Write_DATA(3 << 1, tab[0]);

        Write_DATA(4 << 1, tab[0]);

        RELAY1_flag = 1;
        RELAY2_flag = 1;
      }
    }
  }
  else
    appointment_10ms_time = appointment_com;


  if ((TURN_ON_FLAG == 1) && (TIME_WORK_FLAG == 1))
  {
    if (on_4h_10ms_time > 0)
      on_4h_10ms_time--;
    else
    {
      on_4h_10ms_time = appointment_com;
      if (on_4h_h_time > 0)
        on_4h_h_time--;
      if (on_4h_h_time == 0)
      {
        TURN_ON_FLAG = 0;
      }
    }
  }



  if (settemp_display_time > 0)
    settemp_display_time--;

  if (on_4h_key_time > 1)
    on_4h_key_time--;

  if (TIME_100ms < 10)
    TIME_100ms++;
  if (TIME_1000ms < 4136)
    TIME_1000ms++;
  else
  {
    TIME_1000ms = 0;
    if (TURN_ON_FLAG == 1)
    {
      if (TIME_COUNT > 0)
        TIME_COUNT--;
    }
  }





  if (TIME_LONG < 10)
    TIME_LONG++;
  else
  {
    TIME_LONG = 0;

    if (TURN_ON_FLAG == 1)
    {
      if (TIME_INC_SWTICH_LONG == 50)
      {
        if (TIME_WORK_FLAG == 0)
        {
          if (TIME_COUNT < 60 && command_time_60 == 0)
          {
            TIME_COUNT++;
            TIME_1000ms = 0;
          }
        }
        else
        {
          if (on_4h_h_time < 4)
          {
            on_4h_h_time++;
            on_4h_10ms_time = appointment_com;
          }
        }
      }

      if (TIME_DEC_SWTICH_LONG == 50)
      {
        if (TIME_WORK_FLAG == 0)
        {
          if (TIME_COUNT > 1)
          {
            TIME_COUNT--;
            TIME_1000ms = 0;
          }
        }
        else
        {
          if (on_4h_h_time > 1)
          {
            on_4h_h_time--;
            on_4h_10ms_time = appointment_com;
          }
        }
      }

      if (TEMP_INC_SWTICH_LONG == 50)
      {
        if (TEMP_FC_FLAG == 0)
        {
          if (set_temp < 75)
          {
            set_temp++;
          }
        }
        else
        {
          if (set_f_temp < 170)
          {
            set_f_temp++;
          }
        }

        settemp_display_time = 300;
      }

      if (TEMP_DEC_SWTICH_LONG == 50)
      {
        if (TEMP_FC_FLAG == 0)
        {
          if (set_temp > 40)
          {
            set_temp--;
          }
        }
        else
        {
          if (set_f_temp > 100)
          {
            set_f_temp--;
          }
        }

        settemp_display_time = 300;
      }
    }
    else
    {
      if (appointment_flag == 1)
      {
        if (TIME_INC_SWTICH_LONG == 50)
        {
          if (appointment_h_time < 36)
          {
            appointment_h_time++;
            appointment_10ms_time = appointment_com;
          }
        }

        if (TIME_DEC_SWTICH_LONG == 50)
        {
          if (appointment_h_time > 1)
          {
            appointment_h_time--;
            appointment_10ms_time = appointment_com;
          }
        }
      }
    }
  }

  if (TURN_ON_FLAG == 1)
  {
    if (TIME_INC_FLAG == 1)
    {
      if (TIME_INC_SWTICH_LONG < 50)
        TIME_INC_SWTICH_LONG++;
    }
    else
    {
      TIME_INC_SWTICH_LONG = 0;
    }

    if (TIME_DEC_FLAG == 1)
    {
      if (TIME_DEC_SWTICH_LONG < 50)
        TIME_DEC_SWTICH_LONG++;
    }
    else
    {
      TIME_DEC_SWTICH_LONG = 0;
    }

    if (TEMP_INC_FLAG == 1)
    {
      if (TEMP_INC_SWTICH_LONG < 50)
        TEMP_INC_SWTICH_LONG++;
    }
    else
    {
      TEMP_INC_SWTICH_LONG = 0;
    }

    if (TEMP_DEC_FLAG == 1)
    {
      if (TEMP_DEC_SWTICH_LONG < 50)
        TEMP_DEC_SWTICH_LONG++;
    }
    else
    {
      TEMP_DEC_SWTICH_LONG = 0;
    }
  }
  else
  {



    TEMP_INC_SWTICH_LONG = 0;
    TEMP_DEC_SWTICH_LONG = 0;
    if (appointment_flag == 1)
    {
      if (TIME_INC_FLAG == 1)
      {
        if (TIME_INC_SWTICH_LONG < 50)
          TIME_INC_SWTICH_LONG++;
      }
      else
      {
        TIME_INC_SWTICH_LONG = 0;
      }

      if (TIME_DEC_FLAG == 1)
      {
        if (TIME_DEC_SWTICH_LONG < 50)
          TIME_DEC_SWTICH_LONG++;
      }
      else
      {
        TIME_DEC_SWTICH_LONG = 0;
      }

    }
  }

  command_time_60 = 0;



}

void pro_display(void)
{

  if (connection_code != 0)
  {
    String code_string = String(989);

    Write_DATA(2 << 1, tab[(code_string[0] - '0')]);
    Write_DATA(3 << 1, tab[(code_string[1] - '0')]);
    Write_DATA(4 << 1, tab[(code_string[2] - '0')]);
  }
  else
  {
    unsigned int i;
    unsigned char i_l;
    unsigned char i_h;
    unsigned int i_z;

    unsigned char i_max = 0;
    if (TIME_100ms == 10)
    {
      TIME_100ms = 0;


      if (TURN_ON_FLAG == 1)
      {

        if (TIME_WORK_FLAG == 0)
        {
          i = TIME_COUNT / 10 * 0x10 + TIME_COUNT % 10;
          i_l = i & 0x0f;
          i_h = (i >> 4) & 0x0f;
          Write_DATA(1 << 1, tab[i_l]);




        }
        else
        {

          i_l = 0x76;
          i_h = on_4h_h_time;
          Write_DATA(1 << 1, i_l);
        }

        Write_DATA(0 << 1, tab[i_h]);


        if (settemp_display_time > 0)
        {
          if (TEMP_FC_FLAG == 0)
          {
            i = set_temp / 10 * 0x10 + set_temp % 10;
            i_max = 0;
          }
          else
          {




            if (set_f_temp < 100)
            {
              i_max = 0;
              i = set_f_temp / 10 * 0x10 + set_f_temp % 10;
            }
            else
            {
              i_max = 1;
              i_z = set_f_temp - 100;
              i = i_z / 10 * 0x10 + i_z % 10;
            }
          }
          i_l = i & 0x0f;
          i_h = (i >> 4) & 0x0f;

          if (i_max == 0)
            Write_DATA(2 << 1, 0);
          else
            Write_DATA(2 << 1, tab[1]);
          Write_DATA(3 << 1, tab[i_h]);
          Write_DATA(4 << 1, tab[i_l]);
        }
        else
        {
          if (GRADE_MAX == 0)
            Write_DATA(2 << 1, 0);
          else
            Write_DATA(2 << 1, tab[1]);

          Write_DATA(3 << 1, tab[GRADE_UP]);
          Write_DATA(4 << 1, tab[GRADE_DOWN]);
        }

        if (TIME_WORK_FLAG == 0)
        {
          if (TIME_COUNT == 0)
          {
            RELAY1_flag = 0;
            RELAY2_flag = 0;
            TURN_ON_FLAG = 0;
          }
          else
            RELAY1_flag = 1;
        }

        if (TEMP_FC_FLAG == 0)
        {
          digitalWrite(temp_c_led, LOW);
          digitalWrite(temp_f_led, HIGH);
        }
        else
        {
          digitalWrite(temp_c_led, HIGH);
          digitalWrite(temp_f_led, LOW);
        }
      }
      else
      {

        digitalWrite(temp_c_led, HIGH);
        digitalWrite(temp_f_led, HIGH);
        RELAY1_flag = 0;
        RELAY2_flag = 0;

        if (appointment_flag == 1)
        {
          i = appointment_h_time / 10 * 0x10 + appointment_h_time % 10;
          i_l = i & 0x0f;
          i_h = (i >> 4) & 0x0f;
          Write_DATA(0 << 1, tab[i_h]);
          Write_DATA(1 << 1, tab[i_l]);

          Write_DATA(2 << 1, 0);
          Write_DATA(3 << 1, 0);
          Write_DATA(4 << 1, 0);

          digitalWrite(appointment_led, LOW);
        }
        else
        {


          Write_DATA(0 << 1, 0);
          Write_DATA(1 << 1, 0);

          Write_DATA(2 << 1, 0);
          Write_DATA(3 << 1, 0);
          Write_DATA(4 << 1, 0);

          digitalWrite(appointment_led, HIGH);
        }
      }
    }
  }
}


void pro_pwm(void)
{
  unsigned char i;

  if (RELAY1_flag == 0)
  {
    digitalWrite(RELAY1_LED, HIGH);
    digitalWrite(RELAY1_OUT, LOW);
  }
  else
  {
    if (TEMP_FC_FLAG == 0)
    {
      if (actual_temperature > set_temp)
      {
        digitalWrite(RELAY1_LED, HIGH);
        digitalWrite(RELAY1_OUT, LOW);
      }
      else
      {
        digitalWrite(RELAY1_LED, LOW);
        digitalWrite(RELAY1_OUT, HIGH);
      }
    }
    else
    {
      if (actual_f_temperature > set_f_temp)
      {
        digitalWrite(RELAY1_LED, HIGH);
        digitalWrite(RELAY1_OUT, LOW);
      }
      else
      {
        digitalWrite(RELAY1_LED, LOW);
        digitalWrite(RELAY1_OUT, HIGH);
      }
    }
  }
# 2702 "C:/Users/91904/Desktop/SunlightenProjects/Signiture/signature-sauna-bridge/src/main.ino"
  if (POWER_FLAG2 == 1)
  {



    digitalWrite(RELAY2_OUT, HIGH);
  }
  else
  {





    digitalWrite(RELAY2_OUT, LOW);
  }


  if (RELAY1_flag == 1)
  {
    if (RELAY1_flag_back == 0)
    {
      RELAY2_N = 1;
    }
    else
    {
      if ((POWER_FLAG2_BACK == 0) && (POWER_FLAG2 == 1))
      {
        RELAY2_N++;
        if (RELAY2_N > 3)
          RELAY2_N = 0;
      }
    }
  }
  else
  {
    RELAY2_N = 0;
  }

  RELAY1_flag_back = RELAY1_flag;
  POWER_FLAG2_BACK = POWER_FLAG2;


  if (RELAY2_N == 0)
  {
    digitalWrite(RELAY2_LED, HIGH);
    digitalWrite(RELAY2_BLUE, HIGH);
    digitalWrite(RELAY2_GREEN, HIGH);
  }

  if (RELAY2_N == 1)
  {
    digitalWrite(RELAY2_LED, HIGH);
    digitalWrite(RELAY2_BLUE, HIGH);
    digitalWrite(RELAY2_GREEN, LOW);
  }

  if (RELAY2_N == 2)
  {
    digitalWrite(RELAY2_LED, HIGH);
    digitalWrite(RELAY2_BLUE, LOW);
    digitalWrite(RELAY2_GREEN, HIGH);
  }

  if (RELAY2_N == 3)
  {
    digitalWrite(RELAY2_LED, LOW);
    digitalWrite(RELAY2_BLUE, HIGH);
    digitalWrite(RELAY2_GREEN, HIGH);
  }



  if (IN_LED_FLAG == 0)
    digitalWrite(IN_LED, LOW);
  else
    digitalWrite(IN_LED, HIGH);

  if (OUT_LED_FLAG == 0)
  {
   digitalWrite(OUT_LED, LOW);
  }
  else
  {
    digitalWrite(OUT_LED, HIGH);
  }
}


void pro_uart(void)
{

  int i;
  int x;

  i = Serial.available();

  int sizeOf_Command_heater_acp = (sizeof(command_heater_acp) / sizeof(command_heater_acp[0]));
  if (sizeOf_Command_heater_acp != 0 && command_heater_acp[0] != 0)
  {
    Serial.println("------------------processing_command()n called----------------");
    i = 13;
    process_command(command_heater_acp, i);
    PROCESS_COMMAND_FLAG = true;
  }
  if (i > 0)
  {

    if (i != from_acp_heater)
    {
      from_acp_heater_n = 0;
      from_acp_heater = i;
    }
    else
    {
      if (from_acp_heater_n < 10000)
        from_acp_heater_n++;
      else
      {
        while (Serial.available() > 0)
        {
          Serial.read();
        }

        from_acp_heater = 0;
        from_acp_heater_n = 0;
      }
    }
  }
  else
  {
    from_acp_heater = 0;
    from_acp_heater_n = 0;
  }

  if (Serial.available() > 13)
  {
    while (Serial.available() > 0)
    {
      Serial.read();
    }
  }




  if (sizeOf_Command_heater_acp == 0 && Serial.available() == 13)
  {
    Serial.setTimeout(20);
    i = Serial.readBytes(command_heater_acp, 13);
    process_command(command_heater_acp, i);
  }

  saveStatusOfBridgeCommand();
  saveStatusOfBridgeCommandForApp();

}


void saveStatusOfBridgeCommand()
{

  if (tx_time > 0)
    tx_time--;

try{

  if (tx_time == 0)
  {

    command_tx_acp[0] = 0X46;
    command_tx_acp[1] = 0X53;
    command_tx_acp[2] = 0X44;

    if (appointment_flag == 1)
      command_tx_acp[3] = 0X03;
    else
    {
      if (TURN_ON_FLAG == 1)
      {
        if (TIME_WORK_FLAG == 0)
          command_tx_acp[3] = 0X01;
        else
          command_tx_acp[3] = 0X02;
      }
      else
      {
        command_tx_acp[3] = 0X00;
      }
    }

    command_tx_acp[4] = 0;
    command_tx_acp[5] = 0;
    command_tx_acp[6] = 0;

    if (command_tx_acp[3] == 1)
      command_tx_acp[4] = TIME_COUNT;
    if (command_tx_acp[3] == 2)
      command_tx_acp[5] = on_4h_h_time;
    if (command_tx_acp[3] == 3)
      command_tx_acp[6] = appointment_h_time;

    command_tx_acp[7] = TEMP_FC_FLAG;

    if (TEMP_FC_FLAG == 1)
    {
      command_tx_acp[8] = actual_f_temperature;
      command_tx_acp[9] = set_f_temp;
    }
    else
    {
      command_tx_acp[8] = actual_temperature;
      command_tx_acp[9] = set_temp;
    }

    command_tx_acp[10] = 0;
    command_tx_acp[11] = 0;

    if (IN_LED_FLAG == 1)
      command_tx_acp[10] = (command_tx_acp[10] | 0x01);


    if (OUT_LED_FLAG == 1)
    {
      command_tx_acp[10] = (command_tx_acp[10] | 0x02);
    }
    command_tx_acp[12] = command_tx_acp[0] + command_tx_acp[1] + command_tx_acp[2] + command_tx_acp[3] + command_tx_acp[4] + command_tx_acp[5] + command_tx_acp[6] + command_tx_acp[7] + command_tx_acp[8] + command_tx_acp[9] + command_tx_acp[10] + command_tx_acp[11];
    command_tx_acp[3] = 1;


  }

}catch(String err){
         Serial.print("error");
         Serial.println(err);
     }

}



void saveStatusOfBridgeCommandForApp()
{
  if (tx_time > 0)
    tx_time--;

  if (tx_time == 0)
  {
    stateOfBridge[0] = 0X46;
    stateOfBridge[1] = 0X53;
    stateOfBridge[2] = 0X44;

    if (appointment_flag == 1)
      stateOfBridge[3] = 0X03;
    else
    {
      if (TURN_ON_FLAG == 1)
      {
        if (TIME_WORK_FLAG == 0)
          stateOfBridge[3] = 0X01;
        else
          stateOfBridge[3] = 0X02;
      }
      else
      {
        stateOfBridge[3] = 0X00;
      }
    }

    stateOfBridge[4] = 0;
    stateOfBridge[5] = 0;
    stateOfBridge[6] = 0;

    if (stateOfBridge[3] == 1)
      stateOfBridge[4] = TIME_COUNT;
    if (stateOfBridge[3] == 2)
      stateOfBridge[5] = on_4h_h_time;
    if (stateOfBridge[3] == 3)
      stateOfBridge[6] = appointment_h_time;


    stateOfBridge[7] = TEMP_FC_FLAG;

    if (TEMP_FC_FLAG == 1)
    {
      stateOfBridge[8] = actual_f_temperature;
      stateOfBridge[9] = set_f_temp;
    }
    else
    {
      stateOfBridge[8] = actual_temperature;
      stateOfBridge[9] = set_temp;
    }

    stateOfBridge[10] = 0;
    stateOfBridge[11] = 0;

    if (IN_LED_FLAG == 1)
    {

      stateOfBridge[10] = (stateOfBridge[10] | 0x01);
    }


    if (OUT_LED_FLAG == 1)
    {
      stateOfBridge[10] = (stateOfBridge[10] | 0x02);
    }
    stateOfBridge[12] = stateOfBridge[0] + stateOfBridge[1] + stateOfBridge[2] + stateOfBridge[3] + stateOfBridge[4] + stateOfBridge[5] + stateOfBridge[6] + stateOfBridge[7] + stateOfBridge[8] + stateOfBridge[9] + stateOfBridge[10] + stateOfBridge[11];
    stateOfBridge[3] = 1;
    stateOfBridge[14]=FIRMWARE_UPDATE_STATUS;
  }
}


void process_command(byte command_heater_acp[], int i)
{
  Serial.println("into processing_command");

  byte y = command_heater_acp[0] + command_heater_acp[1] + command_heater_acp[2] + command_heater_acp[3] + command_heater_acp[4] + command_heater_acp[5] + command_heater_acp[6] + command_heater_acp[7] + command_heater_acp[8] + command_heater_acp[9] + command_heater_acp[10] + command_heater_acp[11];


  if ((i == 13) && (command_heater_acp[0] == 0x46) && (command_heater_acp[1] == 0x53) && (command_heater_acp[2] == 0x44) && (y == command_heater_acp[12]))
  {
    command_sw = command_heater_acp[3];
    command_time_60 = command_heater_acp[4];
    command_time_4h = command_heater_acp[5];
    command_time_reservation = command_heater_acp[6];
    command_time_fc = command_heater_acp[7];
    command_temp_en = command_heater_acp[8];
    command_temp_set = command_heater_acp[9];
  }
  reInitializeArray(command_heater_acp);

}



void setup_FileSystem(){
if(!SPIFFS.begin(true)){
      Serial.println("An Error has occurred while mounting SPIFFS");

}else{
  Serial.println("File System Success!");
}

  int isFileExist=SPIFFS.exists(FILE_NAME_json);

   if(isFileExist)
    {
       Serial.print('File Exist');
     return;

    }


  File file = SPIFFS.open(FILE_NAME_json, "w");
  if (!file){
    Serial.println("Error opening file for writing");
    file.close();
    return;
    }
  int bytesWritten = file.print(CONFIG_JSON_DEFAULT_DATA);

  if(bytesWritten==0){
      Serial.println("Failed writing data");
     }else{
    Serial.println("Created the file successfully with CONFIG_JSON_DEFAULT_DATA!");
     }

  file.close();
  return;

 }



void saveWifiDetailInFileSystem(String w_name,String w_password){
   String wifi_detail="wifi_detail";
  String appended_wifiDetail_json= appendWifiDetail(w_name,w_password);
 String fileData_after_addingDetail= updateFileData(wifi_detail,appended_wifiDetail_json);

   if(fileData_after_addingDetail=="false")return;


   writeData_File(fileData_after_addingDetail);

}




 WifiDetail convertJsonToObject(String json){

      const size_t capacity =JSON_OBJECT_SIZE(3);
      StaticJsonDocument<capacity> convertedObject;
        deserializeJson(convertedObject,json);
      JsonObject Obj =convertedObject.as<JsonObject>();

        String key;
        String val;
      for(JsonPair w_object : Obj){

          String key= w_object.key().c_str();
          String val=w_object.value();

 WifiDetail obj(key,val);

   return obj;

      };

 }


void writeData_File(String data_jsonFormat){

   Serial.println("into write data _file");
   Serial.println(data_jsonFormat);

   File file = SPIFFS.open(FILE_NAME_json, "w");
   int bytesWritten = file.print(data_jsonFormat);

     if(bytesWritten==0){
      Serial.println("Failed writing data");
     }else{
     Serial.println("Sucessfully Written Data");
     }

   file.close();
   return;
}

WifiDetail* readData_File(){





 WifiDetail* arrayOfWifiDetail = new WifiDetail[3];
 Serial.print("into readData_file");
 File file1 = SPIFFS.open(FILE_NAME_json, "r");
 if (!file1){
    Serial.println("Error opening file for writing");
    file1.close();
    return arrayOfWifiDetail;
    }

  const size_t capacity =JSON_OBJECT_SIZE(5);
  StaticJsonDocument<capacity> doc;
  Serial.print("StaticJSondocument");
  deserializeJson(doc, file1);
    Serial.print("deserializeJson()");



JsonObject documentRoot = doc.as<JsonObject>();

 Serial.print(documentRoot);
 for (JsonPair object : documentRoot)
{

    String key= object.key().c_str();
    String val=object.value();
    if(key=="wifiDetail"){
      Serial.println("------Wifi Detail ----");

       for(int j=0;j<object.value().size();j++){
           String s=object.value()[j];
           WifiDetail obj= convertJsonToObject(s);
          Serial.print(obj.w_Name);
          Serial.print("-----");
          Serial.print(obj.w_Password);
          Serial.println();
          arrayOfWifiDetail[j]=obj;


       }

    }
       Serial.print(key);
        Serial.print("--");
        Serial.println(val);

}




     documentRoot.clear();
     doc.clear();
     file1.close();


  return arrayOfWifiDetail;


   }

 bool createFile(String fileName){

   File file = SPIFFS.open("/file.json", "r");

  StaticJsonDocument<2000> doc;
  deserializeJson(doc, file);


  String keys[]={ "sensor","time","data"};

   for(int i=0;i<4;i++){
      const char* name = doc[keys[i]];

      Serial.print(keys[i]);
      Serial.print("json data is-> ");
      Serial.println(name);

   }

  file.close();

 }

String updateFileData(String key,String value){

File file = SPIFFS.open(FILE_NAME_json, "r");
      if (!file){
    Serial.println("Error opening file for writing");
    file.close();
    return "false";
    }
    const size_t capacity =JSON_OBJECT_SIZE(15);
  StaticJsonDocument<capacity> doc;
DynamicJsonDocument temp(capacity);
  deserializeJson(doc, file);
JsonObject documentRoot = doc.as<JsonObject>();
 int i=0;

 for (JsonPair object : documentRoot)
{

    String keyTemp= object.key().c_str();
    String valTemp=object.value();

     if(key==keyTemp){
       valTemp=value;
       String key_val="{\""+key+"\":"+value+"}";
       deserializeJson(temp,key_val);
      documentRoot[key]=temp[key];
     }
}


  String s="";
  serializeJson(documentRoot,s);
 file.close();
 documentRoot.clear();

 doc.clear();
 temp.clear();
 return s;




}


 String appendWifiDetail(String name,String password){




    Serial.print("into writeWifiDetail");

   String updatedData="";

   WifiDetail *wifiDetails=readData_File();
   Serial.print('--------------reading the file from updateWifiPAssword-------------------');
   StaticJsonDocument<2000> doc;

    String updatedString="";
    for(int i=0;i<3;i++){
        Serial.print("wifiDeatil");
          Serial.println(wifiDetails[i].w_Name);
      if(i==0){
        String updatedData="{\""+name+"\":\""+password+"\"}";
       updatedString=updatedString+updatedData;
        updatedString=updatedString+",";
      }else{

            Serial.println("-------------------wifiName----------------");
            Serial.print(wifiDetails[i-1].w_Name);


              if(wifiDetails[i-1].w_Name!="" && wifiDetails->w_Name!=NULL){
                 updatedString= updatedString+"{\""+wifiDetails[i-1].w_Name+"\":\""+wifiDetails[i-1].w_Password+"\"}";

                    if(i<2){

                   updatedString=updatedString+",";

                    }

              }


      }

    };
    Serial.println("printing updated value after updating last three");
    String wifiDetail_String_format="["+updatedString+"]";


    Serial.print(wifiDetail_String_format);

   return wifiDetail_String_format;


 }